//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18444
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace CometClient.ServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IChatService")]
    public interface IChatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/DoWork", ReplyAction="http://tempuri.org/IChatService/DoWorkResponse")]
        void DoWork();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/DoWork", ReplyAction="http://tempuri.org/IChatService/DoWorkResponse")]
        System.Threading.Tasks.Task DoWorkAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/RegisterClient", ReplyAction="http://tempuri.org/IChatService/RegisterClientResponse")]
        void RegisterClient(string userName, int Sex, string otherInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/RegisterClient", ReplyAction="http://tempuri.org/IChatService/RegisterClientResponse")]
        System.Threading.Tasks.Task RegisterClientAsync(string userName, int Sex, string otherInfo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/InitializeClient", ReplyAction="http://tempuri.org/IChatService/InitializeClientResponse")]
        void InitializeClient(string publicToken, string privateToken, string displayName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/InitializeClient", ReplyAction="http://tempuri.org/IChatService/InitializeClientResponse")]
        System.Threading.Tasks.Task InitializeClientAsync(string publicToken, string privateToken, string displayName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Send", ReplyAction="http://tempuri.org/IChatService/SendResponse")]
        void Send(string clientPrivateToken, string message, string clientPublicToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/Send", ReplyAction="http://tempuri.org/IChatService/SendResponse")]
        System.Threading.Tasks.Task SendAsync(string clientPrivateToken, string message, string clientPublicToken);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendMessage", ReplyAction="http://tempuri.org/IChatService/SendMessageResponse")]
        void SendMessage(string clientPrivateToken, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IChatService/SendMessage", ReplyAction="http://tempuri.org/IChatService/SendMessageResponse")]
        System.Threading.Tasks.Task SendMessageAsync(string clientPrivateToken, string message);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IChatServiceChannel : CometClient.ServiceReference.IChatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChatServiceClient : System.ServiceModel.ClientBase<CometClient.ServiceReference.IChatService>, CometClient.ServiceReference.IChatService {
        
        public ChatServiceClient() {
        }
        
        public ChatServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ChatServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ChatServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void DoWork() {
            base.Channel.DoWork();
        }
        
        public System.Threading.Tasks.Task DoWorkAsync() {
            return base.Channel.DoWorkAsync();
        }
        
        public void RegisterClient(string userName, int Sex, string otherInfo) {
            base.Channel.RegisterClient(userName, Sex, otherInfo);
        }
        
        public System.Threading.Tasks.Task RegisterClientAsync(string userName, int Sex, string otherInfo) {
            return base.Channel.RegisterClientAsync(userName, Sex, otherInfo);
        }
        
        public void InitializeClient(string publicToken, string privateToken, string displayName) {
            base.Channel.InitializeClient(publicToken, privateToken, displayName);
        }
        
        public System.Threading.Tasks.Task InitializeClientAsync(string publicToken, string privateToken, string displayName) {
            return base.Channel.InitializeClientAsync(publicToken, privateToken, displayName);
        }
        
        public void Send(string clientPrivateToken, string message, string clientPublicToken) {
            base.Channel.Send(clientPrivateToken, message, clientPublicToken);
        }
        
        public System.Threading.Tasks.Task SendAsync(string clientPrivateToken, string message, string clientPublicToken) {
            return base.Channel.SendAsync(clientPrivateToken, message, clientPublicToken);
        }
        
        public void SendMessage(string clientPrivateToken, string message) {
            base.Channel.SendMessage(clientPrivateToken, message);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string clientPrivateToken, string message) {
            return base.Channel.SendMessageAsync(clientPrivateToken, message);
        }
    }
}
